<?php

/**
 * @file
 * Module file for translation management Zanata module.
 *
 * For information on Zanata, see http://zanata.org/
 *
 * Implemented by David Mason damason@redhat.com
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_zanata_tmgmt_translator_plugin_info() {
  return array(
    'zanata' => array(
      'label' => t('Zanata translator'),
      'description' => t('Service to translate strings with Zanata'),
      'plugin controller class' => 'TMGMTZanataTranslatorPluginController',
      'ui controller class' => 'TMGMTZanataTranslatorUIController',
      // FIXME make sure auto create works properly.
      'auto create' => TRUE,
      'default settings' => array(
        'server' => 'http://translate.zanata.org/zanata',
        'segmentation' => 'NONE'
      ),
      // TODO look at other settings on the hook page.
    ),
  );
}

/**
 * Callback used to force re-sending of all items in a job.
 *
 * This is triggered from the UI checkoutInfo form.
 */
function tmgmt_zanata_resubmit_translations($form, &$form_state) {
  $job = $form_state['tmgmt_job'];
  $job->getTranslatorController()->resubmitTranslation($job);
}

/**
 * Callback used to poll for translations in the UI checkoutInfo form.
 */
function tmgmt_zanata_poll_translations($form, &$form_state) {
  $job = $form_state['tmgmt_job'];
  $job->getTranslatorController()->getConnector($job)->pollTranslations();
}

/**
 * Implements hook_cron().
 *
 * Cron based callback used to poll for translations
 */
function tmgmt_zanata_cron(){
    if (variable_get('poll_translations_during_cron', TRUE)) {
        $query = new EntityFieldQuery();
        $result = $query->entityCondition('entity_type', 'tmgmt_job')->propertyCondition('state',
            TMGMT_JOB_STATE_ACTIVE)->propertyCondition('translator', 'zanata')->execute();

        if (!empty($result['tmgmt_job'])) {
            $active_translation_jobs = array_keys($result['tmgmt_job']);
            foreach ($active_translation_jobs as $job_id) {
                $job = tmgmt_job_load($job_id);
                if ($job->getTranslator()->getSetting('transcheck')) {
                    $job->getTranslatorController()->getConnector($job)->pollTranslations();
                }
            }
        }
    }
}
