<?php

/**
 * @file
 * Module file for translation management Zanata module.
 *
 * For information on Zanata, see http://zanata.org/
 *
 * Implemented by David Mason damason@redhat.com
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_zanata_tmgmt_translator_plugin_info() {
  return array(
    'zanata' => array(
      'label' => t('Zanata translator'),
      'description' => t('Service to translate strings with Zanata'),
      'plugin controller class' => 'TMGMTZanataTranslatorPluginController',
      'ui controller class' => 'TMGMTZanataTranslatorUIController',
      // FIXME make sure auto create works properly.
      'auto create' => TRUE,
      'default settings' => array(
        'server' => 'http://translate.zanata.org/zanata',
        'segmentation' => 'NONE',
      ),
      // TODO look at other settings on the hook page.
    ),
  );
}

/**
 * Callback used to force re-sending of all items in a job.
 *
 * This is triggered from the UI checkoutInfo form.
 */
function tmgmt_zanata_resubmit_translations($form, &$form_state) {
  $job = $form_state['tmgmt_job'];
  $job->getTranslatorController()->resubmitTranslation($job);
}

/**
 * Callback used to poll for translations in the UI checkoutInfo form.
 */
function tmgmt_zanata_poll_translations($form, &$form_state) {
  $job = $form_state['tmgmt_job'];
  $job->getTranslatorController()->getConnector($job)->pollTranslations();
}

/**
 * Implements hook_cron().
 *
 * Cron based callback used to poll for translations
 */
function tmgmt_zanata_cron() {
  if (variable_get('poll_translations_during_cron', TRUE)) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'tmgmt_job')->propertyCondition('state',
            TMGMT_JOB_STATE_ACTIVE)->propertyCondition('translator', 'zanata')->execute();

    if (!empty($result['tmgmt_job'])) {
      $active_translation_jobs = array_keys($result['tmgmt_job']);
      foreach ($active_translation_jobs as $job_id) {
        $job = tmgmt_job_load($job_id);
        if ($job->getTranslator()->getSetting('transcheck')) {
          $job->getTranslatorController()->getConnector($job)->pollTranslations();
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function tmgmt_zanata_menu() {
  $items = array();

  $items['admin/tmgmt/express_checkout'] = array(
    'title' => 'TMGMT Express Checkout',
    'description' => 'Express checkout for TMGMT jobs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_zanata_express_checkout_form'),
    // Not sure why there is no access restriction.
    'access callback' => TRUE,
    // This prevents the form displaying in the main navigation menu.
    'menu_name' => 'tmgmt_express_checkout',
    'file' => 'tmgmt_zanata.checkout.inc',
  );

  return $items;
}

/**
 * Implements hook_tmgmt_ui_job_checkout_before_alter().
 *
 * Called when jobs have been created, but before all the individual checkout
 * forms. Jobs and redirects can be modified here to change the checkout
 * workflow.
 */
function tmgmt_zanata_tmgmt_ui_job_checkout_before_alter(&$redirects, &$jobs) {

  // Array of [name => label].
  $translators = tmgmt_translator_labels();

  // Reset pointer to first element.
  reset($translators);

  // Save the job ids in the session, for use by the express checkout form.
  $job_ids = array();
  foreach ($jobs as $job) {
    $job_ids[] = $job->tjid;
  }
  if (!isset($_SESSION['tmgmt_express_checkout'])) {
    $_SESSION['tmgmt_express_checkout'] = array();
  }
  $_SESSION['tmgmt_express_checkout']['job_ids'] = $job_ids;

  $redirects[] = 'admin/tmgmt/express_checkout';
}
